Compile Android  Kernel 
HELP:
https://source.android.com/source/building-kernels.html 
https://forum.xda-developers.com/android/software/ultimate-guide-compile-android-kernel-t2871276
https://www.youtube.com/watch?v=M2cK4ZxNsEk 
https://forum.xda-developers.com/showthread.php?t=1748297 
https://softwarebakery.com/building-the-android-kernel-on-linux 
Motorola Source:
https://github.com/MotorolaMobilityLLC/kernel-msm/releases/tag/MMI-MPJ24.139 

Google toolchain:
https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/ 

DECONFIG for MOTO G 4 PLUS:
Msm8916_defconfig + ext_config/moto-msm8916.config (append)
Steps:
1. Make sure you are running UBUNTU OS.
2. Setup Environment.
3. Download Kernel Source.
4. Download 
5. Make Changes to the kernel source.
6. Build The Kernel.


Install Dependencies
sudo apt-get install -y build-essential libncurses5-dev bzip2

Download Motorola Source code
https://github.com/MotorolaMobilityLLC/kernel-msm/releases/tag/MMI-MPJ24.139 

Download Toolchain
Google : https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/ 

Build
Build script Modification + Selecting deconfig + setting cross compiler
Copy the script (script in next page) to kernel home directory  and run
Append  kernel-msm-MMI-MPJ24.139/arch/arm/configs/ext_config/moto-msm8916.config to kernel-msm-MMI-MPJ24.139/arch/arm/configs/msm8916_defconfig
	#sudo  ./build_script
Flash - Tutorial attached below

SCRIPT
# Init Script
KERNEL_DIR=$PWD
ZIMAGE=$KERNEL_DIR/arch/arm/boot/zImage
BUILD_START=$(date +"%s")
# Tweakable Options Below
export ARCH=arm
export SUBARCH=arm
export KBUILD_BUILD_USER="SaurabhSamanta"
export KBUILD_BUILD_HOST="CRLIITKGP"
export CROSS_COMPILE="/home/trustzone/and/google/arm-eabi-4.8/bin/arm-eabi-"
#export CROSS_COMPILE="/home/trustzone/android/gcc-arm-none-eabi-6-2017-q1-update/bin/arm-none-eabi-"
#export CROSS_COMPILE="arm-linux-gnueabi-"
# Compilation Scripts Are Below
compile_kernel ()
{
echo  "***********************************************"
echo "     	Compiling kernel         	"
echo  "***********************************************"
make clean && make mrproper
make msm8916_defconfig
make -j3
if [ ! -f $ZIMAGE ];
then
echo  "Kernel Compilation failed! Fix the errors!"
exit 1
fi
}

# Finalizing Script Below
case $1 in
clean)
make ARCH=arm -j3 clean mrproper
rm -rf include/linux/autoconf.h
;;
*)
compile_kernel
;;
esac
BUILD_END=$(date +"%s")
DIFF=$(($BUILD_END - $BUILD_START))
echo  "Build completed in $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) seconds."
EXTRACT DECONFIG FILE
In kernel-msm-MMI-MPJ24.139 folder go to scripts folder 
Paste boot.img in the same folder  which was retrieved from android (by the steps given below)
Open terminal here and type     “./extract-ikconfig boot-and-dev.img > motog4_defconfig”
Deconfig file for your android  is motog4_defconfig now in scripts folder
Run script 
RETRIEVE boot.img
Use adb tools to retrieve the desired boot-from-android-device.img, after that, Use Root Explorer to copy the file, so that we can copy the file to computer through MTP:
;use the following commands to found the boot partition,note:7824900.sdhci is different on different android device
$ adb shell
$ su
$ ls -l /dev/block/platform/
;now we know the device platform is 7824900.sdhci
$ ls -l /dev/block/platform/7824900.sdhci/by-name
; now we know the boot partition is cat mmcblk0p14 by [boot -> /dev/block/mmcblk0p14]
use the following command to retrieve the boot.img
$ su
$ cat /dev/block/mmcblk0p14 > /sdcard/boot-from-android-device.img
$ chmod 0666 /sdcard/boot-from-android-device.img
$ adb pull /storage/emulated/0/Download/boot-and-dev.img /home/name/Desktop/

FLASH TUTORIAL
Copy all ".ko" modules and zImage binary to one output folder
Open a terminal
Change to your root kernel directory
Type "mkdir ../kernel-CRLIITKGP"
Type "cp arch/arm/boot/zImage ../kernel-CRLIITKGP/zImage"
Type "find . -name "*.ko" -exec cp {} ../kernel-CRLIITKGP \;"

RETRIEVE boot.img
Use adb tools to retrieve the desired boot-from-android-device.img, after that, Use Root Explorer to copy the file, so that we can copy the file to computer through MTP:
;use the following commands to found the boot partition,note:7824900.sdhci is different on different android device
$ adb shell
$ su
$ ls -l /dev/block/platform/
;now we know the device platform is 7824900.sdhci
$ ls -l /dev/block/platform/7824900.sdhci/by-name
; now we know the boot partition is cat mmcblk0p14 by [boot -> /dev/block/mmcblk0p14]
use the following command to retrieve the boot.img
$ su
$ cat /dev/block/mmcblk0p14 > /sdcard/boot-from-android-device.img
$ chmod 0666 /sdcard/boot-from-android-device.img
$ adb pull /storage/emulated/0/Download/boot-and-dev.img /home/name/Desktop/

UNPACK AND REPACK
Repack Instructions Use Android Image Kitchen to unpack the boot.img and repack it to boot-from-android-device-repacked.img.

1) Unzip
2) Either use the command-line "unpackimg <image-filename.img>", or simply drag-and-drop the image. This will split the image and unpack the ramdisk to a subdirectory.
$ ./unpackimg.sh
3) Alter the ramdisk as you like. Copy all files kernel-CRLIITKGP and rename
4) The repackimg batch script requires no input and simply recombines the previously split zImage with the newly packed modified ramdisk using all the original image information (which was also split and saved).
$ ./repackimg.sh
COPY THE IMG and RAMDISK
5) The cleanup batch script resets the folder to its initial state, removing the split_img+ramdisk directories and any new packed ramdisk or image files.
$ ./cleanup.sh


SPLIT FILE DETAILS <unpackimg>:
This command generates several files with particular suffixes added to the input file's name:
*-second: This is the second-stage bootloader, optional and rarely used on end-user phones. If this file is empty (the most common case) then the phone's bootloader will directly call the Linux kernel.
*-zImage: This is the Linux kernel.
*-ramdisk.gz or *-ramdisk.lz4: the ramdisk used to populate the device's root directory. The extension differs depending on the compression algorithm used.
*-dt: The device tree, populating /dev.
The rest are small files each storing one of the values displayed in unpackbootimg output. These values define the command-line parameter to pass to the Linux kernel and the addresses where the bootloader will have to load each objects at boot time.

Write the boot.img back to the Android device
$ adb reboot-bootloader 
[wait for bootloader to come up]
Try to boot using the new ROM (without flashing it yet, so in case of issue you just have to restart the phone to get it back on trails, replace the ./new-boot.img file name with your own):
$ sudo fastboot boot ./new-boot.img
If the phone works successfully with the new boot image, then go back in fastboot mode and flash it permanently:
$ sudo fastboot flash boot ./new-boot.img
	$ sudo fastboot reboot




Source: 
https://github.com/lygstate/lygstate.github.com/blob/master/_posts/2014-03-10-Extract-boot.img-from-an-android-device.md
http://android.stackexchange.com/questions/69954/how-to-unpack-and-edit-boot-img-for-rom-porting 





ERRORS
ERROR 0:
ADB Unauthorized device

Solution:
If anyone has similar issue of having a phone with a cracked screen and has a need to access adb:
Root your phone (mine was already rooted, so I was blessed at least with that).
If you forgot to enable developers mode and your adb isn't running, then do the following:
Reboot your phone into recovery.
Connect the phone with a cable.
Open terminal.
If you type adb devices you should see the device in the list.
If so, type:
adb shell mount /system
abd shell

echo "persist.service.adb.enable=1" >> default.prop 
echo "persist.service.debuggable=1" >> default.prop
echo "persist.sys.usb.config=mtp,adb" >> default.prop
echo "persist.service.adb.enable=1" >> /system/build.prop 
echo "persist.service.debuggable=1" >> /system/build.prop
echo "persist.sys.usb.config=mtp,adb" >> /system/build.prop
Now if you are going to reboot into your phone android will tell you "oh your adb is working but please tap on this OK button, so we can trust your PC". And obviously if we can't tap on the phone stay in the recovery mode and do the following (assuming you are not in the adb shell mode, if so first type exit):
cd ~/.android
adb push adbkey.pub /data/misc/adb/adb_keys
Hurray, it all should be hunky-dory now! Just reboot the phone and you should be able to access adb when the phone is running:
adb shell reboot

ERROR 1 : 
FS --f2fs problem
Download: 
https://github.com/MotorolaMobilityLLC/motorola-kernel/tree/marshmallow-6.0.0-release

Solution: 
https://forum.xda-developers.com/moto-g/help/help-compiling-kernel-stock-sources-t3072705

too faced the same problem....it is because fs/f2fs has been moved to motorola kernel.
Here's the link :- https://github.com/MotorolaMobilityLLC/motorola-kernel
You need to merge this repo with the kernel msm in your repo for the kernel OR if you have previously downloaded -"kernel-msm-MMI-LXB22.46-28" , simply download the kernel from link given above and merge your previous download with the new download.
You will then be able to make the defconfig......ENJOY !!


ERROR 2:
drivers/video/msm/msm_dba/msm_dba.c:25:30: fatal error: msm_dba_internal.h: No such file or directory

Solution:
Change line 25 : #include <msm_dba_internal.h> to 
#include "msm_dba_internal.h"
In drivers/video/msm/msm_dba/msm_dba.c

ERROR 3:
Mmi_unit_info not defined

Solution:  
Modify the header file  kernel-msm-MMI-MPJ24.139/drivers/soc/qcom/mmi-unit-info.h
Add the following lines after declaration…

/* Function that sets the modem reset value in the SMEM location
 * where mmi_unit_info is stored.
 */
//void mmi_set_pureason(uint32_t val);
#if defined(CONFIG_MMI_UNIT_INFO)
/* Function that sets the modem reset value in the SMEM location
 * where mmi_unit_info is stored.
 */
void mmi_set_pureason(uint32_t val);
#else
static void inline mmi_set_pureason(uint32_t val) { }
#endif

ERROR4:
compiler-gcc.h:107:30: fatal error: linux/compiler-gcc6.h: No such file or directory
 #include gcc_header(__GNUC__)

Solution:
creating a symlink to the existing compiler-gcc5.h works fine.

ln -s compiler-gcc5.h compiler-gcc6.h
inside the kernel-folder/include/linux folder.

ERROR 5:
vl53l0/inc/vl53l0_platform.h:37:27: fatal error: stmvl53l0-i2c.h: No such file or directory

Solution:
Copy the following files from ../folder  to this directory
#include "stmvl53l0-i2c.h"
#include "stmvl53l0-cci.h"
#include "stmvl53l0.h"

ERROR 6:
Error: arch/arm/boot/dts/qcom/msm8952-qrd-skum.dtsi:358.2-3 label or path, 'dsi_otm1906c_1080p_cmd', not found
FATAL ERROR: Syntax error parsing input tree

Solution:
Append  kernel-msm-MMI-MPJ24.139/arch/arm/configs/ext_config/moto-msm8916.config to kernel-msm-MMI-MPJ24.139/arch/arm/configs/msm8916_defconfig
